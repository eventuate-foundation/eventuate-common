version: 2.1
orbs:
  build-and-test:
    jobs:
      build-and-test:
        parameters:
          script:
            description: the script to execute
            type: string
          resource_class:
            description: the resource class
            type: string
            default: 'medium'
          skip_multi_arch_env_vars:
            description: if set don't set multi-arch env vars
            type: string
            default: ''
        machine:
          image: ubuntu-2404:2024.11.1
        resource_class: <<parameters.resource_class>>
        working_directory: ~/eventuate-common
        steps:
          - checkout
          - restore_cache:
              keys:
                - eventuate-common-{{ checksum "gradle.properties" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
                - eventuate-common-
          - run:
              command: |
                ./gradlew testClasses aggregateJavaDocs
          - save_cache:
              paths:
                - ~/.gradle
              key: eventuate-common-{{ checksum "gradle.properties" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          - run:
              command: |
                if [ -z "<<parameters.skip_multi_arch_env_vars>>" ] ; then
                  . set-multi-arch-image-env-vars.sh
                fi
                <<parameters.script>>
          - run:
              name: Save test results
              command: ./.circleci/save-containers-and-tests.sh
              when: always
          - store_test_results:
              path: ~/junit
          - store_artifacts:
              path: ~/junit
          - store_artifacts:
              path: ~/container-logs
  build-multi-arch-image:
    jobs:
      build:
        parameters:
          script:
            description: the script to execute
            type: string
        docker:
          - image: cimg/base:stable
        working_directory: ~/eventuate-common
        steps:
          - checkout
          - setup_remote_docker
          - run:
              name: docker buildx build
              command: |
                . set-multi-arch-image-env-vars.sh
                docker context create tls-env
                docker buildx create tls-env --use
                
                # failed to solve: process "/dev/.buildkit_qemu_emulator
                # https://github.com/docker/buildx/issues/493#issuecomment-754834977
                # https://github.com/tonistiigi/binfmt#installing-emulators
                
                docker run --privileged --rm tonistiigi/binfmt:qemu-v6.2.0 --install arm64,arm
                
                docker login -u ${DOCKER_USER_ID?} -p ${DOCKER_PASSWORD?}
                
                <<parameters.script>>
workflows:
  version: 2.1
  build-test-and-deploy:
    jobs:
      - build-and-test/build-and-test:
          name: build-and-test-mysql8-intel
          script: |
            docker context create tls-env
            docker buildx create tls-env --use
            docker run --privileged --rm tonistiigi/binfmt:qemu-v6.2.0 --install arm64,arm
            export DOCKER_HOST_NAME=$(hostname)
            ./build-and-test-all-mysql8-multi-arch-locally.sh
          skip_multi_arch_env_vars: "true"
      - build-and-test/build-and-test:
          name: build-and-test-postgres-intel
          script: |
            docker context create tls-env
            docker buildx create tls-env --use
            docker run --privileged --rm tonistiigi/binfmt:qemu-v6.2.0 --install arm64,arm
            export DOCKER_HOST_NAME=$(hostname)
            ./build-and-test-all-postgres-multi-arch-locally.sh
          skip_multi_arch_env_vars: "true"
      - build-and-test/build-and-test:
          name: build-and-test-mysql8-arm
          resource_class: arm.medium
          script: |
            docker context create tls-env
            docker buildx create tls-env --use
            docker run --privileged --rm tonistiigi/binfmt:qemu-v6.2.0 --install amd64
            export DOCKER_HOST_NAME=$(hostname)
            export BUILDX_TARGET_PLATFORMS=linux/arm64
            ./build-and-test-all-mysql8-multi-arch-locally.sh
          skip_multi_arch_env_vars: "true"
      - build-and-test/build-and-test:
          name: build-and-test-postgres-arm
          resource_class: arm.medium
          script: |
            docker context create tls-env
            docker buildx create tls-env --use
            docker run --privileged --rm tonistiigi/binfmt:qemu-v6.2.0 --install amd64
            export DOCKER_HOST_NAME=$(hostname)
            ./build-and-test-all-postgres-multi-arch-locally.sh
          skip_multi_arch_env_vars: "true"
      - build-and-test/build-and-test:
          name: build-and-test-mssql
          script: ./build-and-test-all-mssql.sh
      - build-and-test/build-and-test:
          name: build-and-test-postgres
          script: ./build-and-test-all-postgres.sh
      - build-multi-arch-image/build:
          name: build-multi-arch-image-zookeeper
          script: ./zookeeper/build-docker-zookeeper-multi-arch.sh
          context:
            - publish
          requires:
            - build-and-test-mysql8-intel
            - build-and-test-mysql8-arm
            - build-and-test-postgres-intel
            - build-and-test-postgres-arm
            - build-and-test-mssql
            - build-and-test-postgres
      - build-multi-arch-image/build:
          name: build-multi-arch-image-mysql8
          script: ./mysql/build-docker-mysql-8-multi-arch.sh
          context:
            - publish
          requires:
            - build-and-test-mysql8-intel
            - build-and-test-mysql8-arm
            - build-and-test-postgres-intel
            - build-and-test-postgres-arm
            - build-and-test-mssql
            - build-and-test-postgres
      - build-multi-arch-image/build:
          name: build-multi-arch-image-vanilla-mysql8
          script: ./mysql/build-docker-vanilla-mysql-8-multi-arch.sh
          context:
            - publish
          requires:
            - build-and-test-mysql8-intel
            - build-and-test-mysql8-arm
            - build-and-test-postgres-intel
            - build-and-test-postgres-arm
            - build-and-test-mssql
            - build-and-test-postgres
      - build-multi-arch-image/build:
          name: build-multi-arch-image-postgres
          script: ./postgres/build-docker-postgres-multi-arch.sh
          context:
            - publish
          requires:
            - build-and-test-mysql8-intel
            - build-and-test-mysql8-arm
            - build-and-test-postgres-intel
            - build-and-test-postgres-arm
            - build-and-test-mssql
            - build-and-test-postgres
      - build-multi-arch-image/build:
          name: build-multi-arch-image-vanilla-postgres
          script: ./postgres/build-docker-vanilla-postgres-multi-arch.sh
          context:
            - publish
          requires:
            - build-and-test-mysql8-intel
            - build-and-test-mysql8-arm
            - build-and-test-postgres-intel
            - build-and-test-postgres-arm
            - build-and-test-mssql
            - build-and-test-postgres
      - build-and-test/build-and-test:
          name: test-mysql8-zookeeper-multi-arch-intel
          script: ./build-and-test-all-mysql8-multi-arch.sh
          requires:
            - build-multi-arch-image-zookeeper
            - build-multi-arch-image-mysql8
            - build-multi-arch-image-vanilla-mysql8
      - build-and-test/build-and-test:
          name: test-mysql8-zookeeper-multi-arch-arm
          script: ./build-and-test-all-mysql8-multi-arch.sh
          resource_class: arm.medium
          requires:
            - build-multi-arch-image-zookeeper
            - build-multi-arch-image-mysql8
            - build-multi-arch-image-vanilla-mysql8
      - build-and-test/build-and-test:
          name: test-postgres-zookeeper-multi-arch-intel
          script: ./build-and-test-all-postgres-multi-arch.sh
          requires:
            - build-multi-arch-image-zookeeper
            - build-multi-arch-image-postgres
            - build-multi-arch-image-vanilla-postgres
      - build-and-test/build-and-test:
          name: test-postgres-zookeeper-multi-arch-arm
          script: ./build-and-test-all-postgres-multi-arch.sh
          resource_class: arm.medium
          requires:
            - build-multi-arch-image-zookeeper
            - build-multi-arch-image-postgres
            - build-multi-arch-image-vanilla-postgres
      - build-and-test/build-and-test:
          name: deploy-artifacts
          context:
            - publish
          requires:
            - test-mysql8-zookeeper-multi-arch-intel
            - test-mysql8-zookeeper-multi-arch-arm
            - test-postgres-zookeeper-multi-arch-intel
            - test-postgres-zookeeper-multi-arch-arm
          script: ./deploy-artifacts.sh
      - build-and-test/build-and-test:
          name: deploy-docker-images
          context:
            - publish
          requires:
            - test-mysql8-zookeeper-multi-arch-intel
            - test-mysql8-zookeeper-multi-arch-arm
            - test-postgres-zookeeper-multi-arch-intel
            - test-postgres-zookeeper-multi-arch-arm
          script: ./deploy-docker-images.sh
      - build-and-test/build-and-test:
          name: deploy-multi-arch
          context:
            - publish
          requires:
            - test-mysql8-zookeeper-multi-arch-intel
            - test-mysql8-zookeeper-multi-arch-arm
            - test-postgres-zookeeper-multi-arch-intel
            - test-postgres-zookeeper-multi-arch-arm
          script: ./deploy-multi-arch.sh
