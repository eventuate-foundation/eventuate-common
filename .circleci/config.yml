version: 2.1
orbs:
  build-and-test:
    jobs:
      build-and-test:
        parameters:
          script:
            description: the script to execute
            type: string
          resource_class:
            description: the resource class
            type: string
            default: 'medium'
        machine:
          image: ubuntu-2004:202101-01
        resource_class: <<parameters.resource_class>>
        working_directory: ~/eventuate-common
        steps:
          - checkout
          - restore_cache:
              keys:
                - eventuate-common-{{ checksum "gradle.properties" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
                - eventuate-common-
          - run:
              command: |
                ./gradlew testClasses aggregateJavaDocs
          - save_cache:
              paths:
                - ~/.gradle
              key: eventuate-common-{{ checksum "gradle.properties" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          - run:
              command: |
                . set-multi-arch-image-env-vars.sh
                <<parameters.script>>
          - run:
              name: Save test results
              command: ./.circleci/save-containers-and-tests.sh
              when: always
          - store_test_results:
              path: ~/junit
          - store_artifacts:
              path: ~/junit
          - store_artifacts:
              path: ~/container-logs
jobs:
  build-multi-arch-images:
    docker:
      - image: cimg/base:stable
    working_directory: ~/eventuate-common
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: docker buildx build
          command: |
            . set-multi-arch-image-env-vars.sh
            docker context create tls-env
            docker buildx create tls-env --use

            # failed to solve: process "/dev/.buildkit_qemu_emulator
            # https://github.com/docker/buildx/issues/493#issuecomment-754834977
            # https://github.com/tonistiigi/binfmt#installing-emulators

            docker run --privileged --rm tonistiigi/binfmt --install arm64,arm

            ./build-multi-arch-images.sh
  deploy-multi-arch:
    docker:
      - image: cimg/base:stable
    working_directory: ~/eventuate-common
    steps:
      - checkout
      - run:
          command: |
            . set-multi-arch-image-env-vars.sh
            ./deploy-multi-arch.sh
workflows:
  version: 2.1
  build-test-and-deploy:
    jobs:
      - build-and-test/build-and-test:
          name: build-and-test-mysql
          script: ./build-and-test-all-mysql.sh
      - build-and-test/build-and-test:
          name: build-and-test-mysql8
          script: ./build-and-test-all-mysql8.sh
      - build-and-test/build-and-test:
          name: build-and-test-mariadb
          script: ./build-and-test-all-mariadb.sh
      - build-and-test/build-and-test:
          name: build-and-test-mssql
          script: ./build-and-test-all-mssql.sh
      - build-and-test/build-and-test:
          name: build-and-test-postgres
          script: ./build-and-test-all-postgres.sh
      - build-multi-arch-images:
          context:
            - publish
          requires:
            - build-and-test-mysql
            - build-and-test-mysql8
            - build-and-test-mariadb
            - build-and-test-mssql
            - build-and-test-postgres
      - build-and-test/build-and-test:
          name: test-mysql8-zookeeper-multi-arch-intel
          script: ./build-and-test-all-mysql8-multi-arch.sh
          requires:
            - build-multi-arch-images
      - build-and-test/build-and-test:
          name: test-mysql8-zookeeper-multi-arch-arm
          script: ./build-and-test-all-mysql8-multi-arch.sh
          resource_class: arm.medium
          requires:
            - build-multi-arch-images
      - build-and-test/build-and-test:
          name: deploy-artifacts
          context:
            - publish
          requires:
            - test-mysql8-zookeeper-multi-arch-intel
            - test-mysql8-zookeeper-multi-arch-arm
          script: ./deploy-artifacts.sh
      - deploy-multi-arch:
          context:
            - publish
          requires:
            - test-mysql8-zookeeper-multi-arch-intel
            - test-mysql8-zookeeper-multi-arch-arm
