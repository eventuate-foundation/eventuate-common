buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}

apply plugin: 'docker-compose'
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublishDockerImages"

allprojects {
    group = "io.eventuate.common"
}

projects {

    license {
        header rootProject.file('src/license/HEADER')
    }
}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    if (!project.name.endsWith("-bom"))
        dependencies {
            testCompile "junit:junit:4.12"
        }
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregates Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP

        destinationDir file("$buildDir/docs/javadoc")
    }
}

dockerCompose {
    removeOrphans = true
    environment.put "DOCKER_IMAGE_TAG", version
    environment.put "USE_DB_ID", useDbId
    environment.put "USE_JSON_PAYLOAD_AND_HEADERS", useJsonPayloadAndHeaders

    mysql8 {
        projectName = null
        useComposeFiles = ["docker-compose-mysql8.yml", "docker-compose-zookeeper.yml"]
        removeContainers = project.ext.removeContainers.toBoolean()
    }

    vanillamysql8 {
        projectName = null
        useComposeFiles = ["docker-compose-vanilla-mysql8-multi-arch.yml"]
        removeContainers = project.ext.removeContainers.toBoolean()
    }

    mysql8multiarch {
        projectName = null
        useComposeFiles = ["docker-compose-mysql8-multi-arch.yml", "docker-compose-zookeeper-multi-arch.yml"]
        removeContainers = project.ext.removeContainers.toBoolean()
    }

    postgresmultiarch {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-multi-arch.yml", "docker-compose-zookeeper-multi-arch.yml"]
        removeContainers = project.ext.removeContainers.toBoolean()
    }

    postgres {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml", "docker-compose-zookeeper.yml"]
        removeContainers = project.ext.removeContainers.toBoolean()
    }

    vanillapostgres {
        projectName = null
        useComposeFiles = ["docker-compose-vanilla-postgres-multi-arch.yml"]
        removeContainers = project.ext.removeContainers.toBoolean()
    }

    mssql {
        projectName = null
        useComposeFiles = ["docker-compose-mssql.yml", "docker-compose-zookeeper.yml"]
        removeContainers = project.ext.removeContainers.toBoolean()
    }

    publish {
      projectName = null
      useComposeFiles = ["docker-compose-mssql.yml"]
      removeContainers = project.ext.removeContainers.toBoolean()
    }
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}
